[
    {
        "group_name": "Misc",
        "group_slug": "misc",
        "test_cases": [
            {
                "script_name": "null_char",
                "group": "Misc",
                "doc_str": "Output a null character\n\nSee https://en.wikipedia.org/wiki/Null_character\n",
                "doc_str_first_line": "Output a null character",
                "implementations": [
                    {
                        "file_name": "null_char.py",
                        "code": "print(\"Hello World \\0\")",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "null_char.rb",
                        "code": "puts \"Hello World \\0\"",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "null_char.mjs",
                        "code": "console.log(\"Hello World \\0\")",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "null_char.mjs",
                        "code": "console.log(\"Hello World \\0\")",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "null_char.php",
                        "code": "<?php\n\necho \"Hello World \\0\";",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "null_char.R",
                        "code": "temp_file <- tempfile()\n\nwriteBin(c(charToRaw(\"Hello World \"), as.raw(0), charToRaw(\"\\n\")), temp_file)\n\nsystem(paste(\"cat\", temp_file))\n\nunlink(temp_file)",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "null_char.pl",
                        "code": "use strict;\nuse warnings;\n\nprint \"Hello World \\0\";",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "NullChar.java",
                        "code": "public class NullChar {\n  public static void main(String[] args) {\n    System.out.println(\"Hello World \\0\");\n  }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "null_char.sh",
                        "code": "printf \"Hello World \\0\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "null_char.lua",
                        "code": "print(\"Hello World \\0\")",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "NullChar.cs",
                        "code": "class NullChar {\n  public static void Main(string[] args) {\n    Console.WriteLine(\"Hello World \\0\");\n  }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "null_char.go",
                        "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello World \\x00\")\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "null_char.swift",
                        "code": "print(\"Hello World \\0\")",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "null_char.raku",
                        "code": "use v6;\n\nsay \"Hello World \\0\";",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "null_char.rs",
                        "code": "fn main() {\n    println!(\"Hello World \\0\");\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "arguments",
                "group": "Misc",
                "doc_str": "Read command line arguments",
                "doc_str_first_line": "Read command line arguments",
                "implementations": [
                    {
                        "file_name": "arguments.py",
                        "code": "import sys\n\nprint(\"1st argument: \" + sys.argv[1])\nprint(\"2nd argument: \" + sys.argv[2])",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "arguments.rb",
                        "code": "puts \"1st argument: #{ARGV[0]}\"\nputs \"2nd argument: #{ARGV[1]}\"",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "arguments.mjs",
                        "code": "console.log(\"1st argument:\", process.argv[2])\nconsole.log(\"2nd argument:\", process.argv[3])",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "arguments.mjs",
                        "code": "console.log(\"1st argument:\", Deno.args[0])\nconsole.log(\"2nd argument:\", Deno.args[1])",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "arguments.php",
                        "code": "<?php\n\necho \"1st argument: \", $argv[1], \"\\n\";\necho \"2nd argument: \", $argv[2], \"\\n\";",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "arguments.R",
                        "code": "args <- commandArgs(trailingOnly = TRUE)\n\ncat(\"1st argument:\", args[1], \"\\n\")\ncat(\"2nd argument:\", args[2], \"\\n\")",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "arguments.pl",
                        "code": "use strict;\nuse warnings;\n\nprint \"1st argument: \", $ARGV[0], \"\\n\";\nprint \"2nd argument: \", $ARGV[1], \"\\n\";",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "Arguments.java",
                        "code": "class Main{\n    public static void main(String[] args){\n        System.out.println(\"1st argument: \" + args[0]);\n        System.out.println(\"2nd argument: \" + args[1]);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "arguments.sh",
                        "code": "echo \"1st argument: $1\"\necho \"2nd argument: $2\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "arguments.lua",
                        "code": "print(\"1st argument: \"..arg[1])\nprint(\"2nd argument: \"..arg[2])",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "Arguments.cs",
                        "code": "class Arguments\n{\n  public static void Main(string[] args)\n  {\n    Console.WriteLine($\"1st argument: {args[0]}\");\n    Console.WriteLine($\"2nd argument: {args[1]}\");\n  }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "arguments.go",
                        "code": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfmt.Println(\"1st argument: \" + os.Args[1])\n\tfmt.Println(\"2nd argument: \" + os.Args[2])\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "arguments.swift",
                        "code": "import Foundation\n\nlet args = CommandLine.arguments\n\nprint(\"1st argument: \\(args[1])\")\nprint(\"2nd argument: \\(args[2])\")",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "arguments.raku",
                        "code": "use v6;\n\nsay \"1st argument: \" ~ @*ARGS[0];\nsay \"2nd argument: \" ~ @*ARGS[1];",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "arguments.rs",
                        "code": "use std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    println!(\"1st argument: {}\", args[1]);\n    println!(\"2nd argument: {}\", args[2]);\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            }
        ]
    },
    {
        "group_name": "Standard I/O",
        "group_slug": "standard-io",
        "test_cases": [
            {
                "script_name": "stdin",
                "group": "Standard I/O",
                "doc_str": "Read from stdin line by line",
                "doc_str_first_line": "Read from stdin line by line",
                "implementations": [
                    {
                        "file_name": "stdin.py",
                        "code": "while True:\n    try:\n        user_input = input()\n        print(\"line: \" + user_input)\n    except EOFError:\n        break",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "stdin.rb",
                        "code": "while user_input = gets\n  puts \"line: #{user_input}\"\nend",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "stdin.mjs",
                        "code": "import * as readline from 'node:readline/promises'\n\nconst rl = readline.createInterface({ input: process.stdin })\n\nfor await (const line of rl) {\n  console.log(\"line:\", line)\n}",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "stdin.mjs",
                        "code": "import { readLines } from 'https://deno.land/std/io/mod.ts';\n\nconst rl = readLines(Deno.stdin);\n\nfor await (const line of rl) {\n  console.log(\"line:\", line);\n}",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "stdin.php",
                        "code": "<?php\n\nwhile ($user_input = fgets(STDIN)) {\n    echo \"line: \", $user_input;\n}",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "stdin.R",
                        "code": "for (line in readLines(\"stdin\")) {\n  cat(\"line:\", line, \"\\n\")\n}",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "stdin.pl",
                        "code": "use strict;\nuse warnings;\n\nprint \"line: $_\" while <STDIN>;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "Stdin.java",
                        "code": "import java.util.Scanner;\nimport java.util.stream.Stream;\n\npublic class Stdin {\n    public static void main(String[] args) {\n        var scanner = new Scanner(System.in);\n\n        Stream.generate(scanner::nextLine)\n              .forEach(line -> System.out.println(\"line: \" + line));\n\n        scanner.close();\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "stdin.sh",
                        "code": "while IFS= read -r user_input; do\n  echo \"line: $user_input\"\ndone",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "stdin.lua",
                        "code": "for user_input in io.lines() do\n    print(\"line: \" .. user_input)\nend",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "Stdin.cs",
                        "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Stdin\n{\n    public static void Main(string[] args)\n    {\n        string line;\n        while ((line = Console.ReadLine()) != null)\n        {\n            Console.WriteLine($\"line: {line}\");\n        }\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "stdin.go",
                        "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tfmt.Println(\"line: \" + scanner.Text())\n\t}\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "stdin.swift",
                        "code": "import Foundation\n\nwhile let line = readLine() {\n  print(\"line: \\(line)\")\n}",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "stdin.raku",
                        "code": "use v6;\n\nsay \"line: $_\" for lines;",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "stdin.rs",
                        "code": "use std::io::{self, stdin, BufRead};\n\nfn main() {\n    for line in stdin().lock().lines() {\n        println!(\"line: {}\", line.unwrap());\n    }\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "streaming_stdin",
                "group": "Standard I/O",
                "doc_str": "Read from stdin line by line",
                "doc_str_first_line": "Read from stdin line by line",
                "implementations": [
                    {
                        "file_name": "streaming_stdin.py",
                        "code": "while True:\n    try:\n        user_input = input()\n        print(\"received \" + user_input)\n    except EOFError:\n        break",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.rb",
                        "code": "STDOUT.sync = true\n\nwhile input = gets\n  puts \"received #{input}\"\nend",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.mjs",
                        "code": "import * as readline from 'node:readline/promises'\n\nconst rl = readline.createInterface({ input: process.stdin })\n\nfor await (const line of rl) {\n  console.log(\"received\", line)\n}",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.mjs",
                        "code": "import { readLines } from 'https://deno.land/std/io/mod.ts';\n\nconst rl = readLines(Deno.stdin);\n\nfor await (const line of rl) {\n  console.log(\"received\", line);\n}",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.php",
                        "code": "<?php\n\nwhile ($user_input = fgets(STDIN)) {\n    echo \"received \", $user_input;\n}",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.R",
                        "code": "while(length(line <- readLines(\"stdin\", n = 1L)) > 0) {\n  cat(\"received\", line, \"\\n\")\n}",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.pl",
                        "code": "use strict;\nuse warnings;\n\n$| = 1;\nprint \"received $_\" while <STDIN>;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "StreamingStdin.java",
                        "code": "import java.util.Scanner;\nimport java.util.stream.Stream;\n\npublic class StreamingStdin {\n    public static void main(String[] args) {\n        var scanner = new Scanner(System.in);\n\n        Stream.generate(scanner::nextLine)\n              .forEach(line -> System.out.println(\"received \" + line));\n\n        scanner.close();\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.sh",
                        "code": "while IFS= read -r user_input; do\n  echo \"received $user_input\"\ndone",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.lua",
                        "code": "for user_input in io.lines() do\n    print(\"received \" .. user_input)\nend",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "StreamingStdin.cs",
                        "code": "using System;\n\nclass StreamingStdin{\n    public static void Main(string[] args){\n        string line;\n\n        while (!string.IsNullOrEmpty(line = Console.ReadLine())){\n            Console.WriteLine($\"received {line}\");\n        }\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.go",
                        "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tscanner := bufio.NewScanner(os.Stdin)\n\tfor scanner.Scan() {\n\t\tfmt.Println(\"received\", scanner.Text())\n\t}\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.swift",
                        "code": "import Foundation\n\n#if os(macOS) || os(iOS)\n  import Darwin\n#elseif os(Linux)\n  import Glibc\n#endif\nsetvbuf(stdout, nil, _IONBF, 0)\n\nwhile let line = readLine() {\n  print(\"received \\(line)\")\n}",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.raku",
                        "code": "for lines() {\n    say \"received $_\";\n    $*OUT.flush;\n}",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "streaming_stdin.rs",
                        "code": "use std::io::{self, stdin, BufRead};\n\nfn main() {\n    for line in stdin().lock().lines() {\n        println!(\"received {}\", line.unwrap());\n    }\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            }
        ]
    },
    {
        "group_name": "File I/O",
        "group_slug": "file-io",
        "test_cases": [
            {
                "script_name": "read_file",
                "group": "File I/O",
                "doc_str": "Read a file line by line",
                "doc_str_first_line": "Read a file line by line",
                "implementations": [
                    {
                        "file_name": "read_file.py",
                        "code": "file_path = './my-text-file.txt'\n\nwith open(file_path, 'r', encoding='utf-8') as file:\n    for line in file:\n        line = line.strip()\n        print(f\"line: {line}\")",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "read_file.rb",
                        "code": "File.foreach(\"./my-text-file.txt\") do |line|\n  puts \"line: #{line}\"\nend",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "read_file.mjs",
                        "code": "import { promises as fs } from 'fs'\n\nconst filePath = './my-text-file.txt'\n\nconst fileContent = await fs.readFile(filePath, 'utf8')\n\nfor (const line of fileContent.split(\"\\n\")) {\n  if (line !== \"\") {\n    console.log('line:', line)\n  }\n}",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "read_file.mjs",
                        "code": "const filePath = \"./my-text-file.txt\";\nconst fileContent = await Deno.readTextFile(filePath);\n\nfor (const line of fileContent.split(\"\\n\")) {\n  if (line !== \"\") {\n    console.log('line:', line);\n  }\n}",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "read_file.php",
                        "code": "<?php\n\n$file_path = './my-text-file.txt';\n\nforeach (file($file_path) as $index => $line) {\n    echo \"line: $line\";\n}",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "read_file.R",
                        "code": "file_path <- \"./my-text-file.txt\"\n\nlines <- readLines(file_path)\n\nfor (line in lines) {\n  cat(\"line:\", line, \"\\n\")\n}",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "read_file.pl",
                        "code": "use strict;\nuse warnings;\n\nmy $file_path = './my-text-file.txt';\nopen my $fh, '<', $file_path;\n\nprint \"line: $_\" while <$fh>;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "ReadFile.java",
                        "code": "import java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class ReadFile {\n    public static void main(String[] args) throws Exception {\n        var filePath = Paths.get(\"./my-text-file.txt\");\n\n        Files.lines(filePath)\n            .forEach(line -> System.out.println(\"line: \" + line));\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "read_file.sh",
                        "code": "file_path=\"./my-text-file.txt\"\n\nwhile IFS= read -r line; do\n  echo \"line: $line\"\n\ndone < \"$file_path\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "read_file.lua",
                        "code": "local filePath = \"./my-text-file.txt\"\n\nlocal file = io.open(filePath, \"r\")\n\nfor line in file:lines() do\n    print(\"line: \" .. line)\nend\nfile:close()",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "ReadFile.cs",
                        "code": "using System;\nusing System.IO;\n\nclass ReadFile\n{\n    public static void Main(string[] args)\n    {\n        var filePath = \"./my-text-file.txt\";\n\n        foreach (var line in File.ReadLines(filePath))\n        {\n            Console.WriteLine($\"line: {line}\");\n        }\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "read_file.go",
                        "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfilePath := \"./my-text-file.txt\"\n\n\tfile, _ := os.Open(filePath)\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tif line != \"\" {\n\t\t\tfmt.Println(\"line:\", line)\n\t\t}\n\t}\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "read_file.swift",
                        "code": "import Foundation\n\nlet filePath = \"./my-text-file.txt\"\n\nlet content = try String(contentsOfFile: filePath, encoding: .utf8)\nlet lines = content.components(separatedBy: .newlines)\nfor line in lines {\n  if !line.isEmpty {\n    print(\"line: \\(line)\")\n  }\n}",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "read_file.raku",
                        "code": "use v6;\n\nsay \"line: $_\" for './my-text-file.txt'.IO.lines;",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "read_file.rs",
                        "code": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader};\n\nfn main() {\n    let file = File::open(\"./my-text-file.txt\").unwrap();\n\n    for line in BufReader::new(file).lines() {\n        println!(\"line: {}\", line.unwrap());\n    }\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "write_to_text_file",
                "group": "File I/O",
                "doc_str": "Write to a text file",
                "doc_str_first_line": "Write to a text file",
                "implementations": [
                    {
                        "file_name": "write_to_text_file.py",
                        "code": "outfile = \"output.txt\"\ntext = \"Hello World!\"\n\nwith open(outfile, 'w', encoding='utf-8') as f:\n    f.write(text)",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.rb",
                        "code": "File.write \"output.txt\", \"Hello World!\"",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.mjs",
                        "code": "import fs from 'fs/promises'\n\nawait fs.writeFile(\"output.txt\", \"Hello World!\")",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.mjs",
                        "code": "await Deno.writeTextFile(\"output.txt\", \"Hello World!\");",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.php",
                        "code": "<?php\n\nfile_put_contents(\"output.txt\", \"Hello World!\");",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.R",
                        "code": "writeLines(\"Hello World!\", \"output.txt\")",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.pl",
                        "code": "use strict;\nuse warnings;\n\nopen my $fh, '>', \"output.txt\";\nprint $fh \"Hello World!\";\nclose $fh;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "WriteToTextFile.java",
                        "code": "import java.nio.charset.StandardCharsets;\nimport java.nio.file.*;\n\npublic class WriteToTextFile {\n    public static void main(String[] args) throws Exception {\n        var outFile = Paths.get(\"output.txt\");\n        var text = \"Hello World!\";\n        Files.write(outFile, text.getBytes(StandardCharsets.UTF_8));\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.sh",
                        "code": "echo \"Hello World!\" > output.txt",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.lua",
                        "code": "local file = io.open(\"output.txt\", \"w\")\nfile:write(\"Hello World!\")\nfile:close()",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "WriteToTextFile.cs",
                        "code": "using System;\nusing System.IO;\n\nclass WriteToTextFile\n{\n    public static void Main(string[] args)\n    {\n\n        File.WriteAllText(\"output.txt\", \"Hello World!\");\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.go",
                        "code": "package main\n\nimport (\n\t\"os\"\n)\n\nfunc main() {\n\tos.WriteFile(\"output.txt\", []byte(\"Hello World!\"), 0)\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.swift",
                        "code": "import Foundation\n\ntry \"Hello World!\".write(toFile: \"output.txt\", atomically: false, encoding: .utf8)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.raku",
                        "code": "use v6;\n\nmy $fh = open \"output.txt\", :w;\n$fh.print: \"Hello World!\";\n$fh.close;",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "write_to_text_file.rs",
                        "code": "use std::fs::write;\n\nfn main() {\n    write(\"output.txt\", \"Hello World!\").unwrap();\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            }
        ]
    },
    {
        "group_name": "JSON",
        "group_slug": "json",
        "test_cases": [
            {
                "script_name": "read_json_file",
                "group": "JSON",
                "doc_str": "Read and parse a JSON file",
                "doc_str_first_line": "Read and parse a JSON file",
                "implementations": [
                    {
                        "file_name": "read_json_file.py",
                        "code": "import json\n\njson_file = \"people.json\"\n\nwith open(json_file, \"r\", encoding='utf-8') as f:\n    people = json.load(f)\n\nfor person in people:\n    print(f\"Hello, {person['age']} year old {person['first_name']}\")",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "read_json_file.rb",
                        "code": "require 'json'\n\npeople = JSON.load_file(\"people.json\")\n\npeople.each do |person|\n  puts \"Hello, #{person['age']} year old #{person['first_name']}\"\nend",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "read_json_file.mjs",
                        "code": "import { promises as fs } from 'fs'\n\nconst filePath = './people.json'\n\nconst data = await fs.readFile(filePath, 'utf8')\n\nconst people = JSON.parse(data)\n\nfor (const person of people) {\n    console.log(`Hello, ${person.age} year old ${person.first_name}`)\n}",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "read_json_file.mjs",
                        "code": "const filePath = \"./people.json\";\n\nconst data = await Deno.readTextFile(filePath);\n\nconst people = JSON.parse(data);\n\nfor (const person of people) {\n    console.log(`Hello, ${person.age} year old ${person.first_name}`);\n}",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "read_json_file.php",
                        "code": "<?php\n\n$jsonData = file_get_contents('people.json');\n\n$people = json_decode($jsonData);\n\nforeach ($people as $person) {\n    echo \"Hello, {$person->age} year old {$person->first_name}\\n\";\n}",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "read_json_file.R",
                        "code": "library(jsonlite)\n\nfilename <- \"people.json\"\n\npeople <- fromJSON(filename, simplifyVector = FALSE)\n\nfor (person in people) {\n    cat(\"Hello,\", person$age, \"year old\", person$first_name, \"\\n\")\n}",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "read_json_file.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nmy $file_path = './people.json';\nopen my $fh, '<', $file_path;\n\nmy $people = decode_json(do { local $/; <$fh> });\n\nprint \"Hello, $_->{'age'} year old $_->{'first_name'}\\n\" for @$people;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "ReadJsonFile.java",
                        "code": "import com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.File;\n\npublic class ReadJsonFile {\n    public static void main(String[] args) throws Exception {\n        var file = new File(\"people.json\");\n\n        new ObjectMapper()\n            .readTree(file)\n            .elements()\n            .forEachRemaining(person -> {\n                var age = person.get(\"age\").asInt();\n                var firstName = person.get(\"first_name\").asText();\n\n                System.out.printf(\"Hello, %d year old %s%n\", age, firstName);\n            });\n        }\n    }",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "read_json_file.sh",
                        "code": "file_path=\"people.json\"\n\njq -c '.[]' \"$file_path\" | while IFS= read -r person; do\n    age=$(echo \"$person\" | jq -r '.age')\n    first_name=$(echo \"$person\" | jq -r '.first_name')\n    echo \"Hello, $age year old $first_name\"\ndone",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "read_json_file.lua",
                        "code": "local json = require(\"dkjson\")\n\nlocal filePath = \"people.json\"\n\nlocal file = io.open(filePath, \"r\")\nlocal jsonString = file:read(\"*a\")\nfile:close()\n\nlocal people, pos = json.decode(jsonString, 1, nil)\n\nfor _, person in ipairs(people) do\n    print(string.format(\"Hello, %d year old %s\", person.age, person.first_name))\nend",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "ReadJsonFile.cs",
                        "code": "using System;\nusing System.IO;\nusing System.Text.Json;\n\nclass ReadJsonFile\n{\n    public static void Main(string[] args)\n    {\n        var filePath = \"people.json\";\n\n        var json = File.ReadAllText(filePath);\n\n        var people = JsonSerializer.Deserialize<JsonElement[]>(json);\n\n        foreach (var person in people)\n        {\n            var age = person.GetProperty(\"age\").GetInt32();\n            var firstName = person.GetProperty(\"first_name\").GetString();\n            Console.WriteLine($\"Hello, {age} year old {firstName}\");\n        }\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "read_json_file.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfilePath := \"people.json\"\n\n\tfile, _ := os.Open(filePath)\n\tdefer file.Close()\n\n\tvar people []map[string]interface{}\n\tdecoder := json.NewDecoder(file)\n\tdecoder.Decode(&people)\n\n\tfor _, person := range people {\n\t\tage := person[\"age\"].(float64)\n\t\tfirstName := person[\"first_name\"].(string)\n\t\tfmt.Printf(\"Hello, %.0f year old %s\\n\", age, firstName)\n\t}\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "read_json_file.swift",
                        "code": "import Foundation\n\nlet jsonFile = \"people.json\"\n\nlet fileURL = URL(fileURLWithPath: jsonFile)\nlet jsonData = try Data(contentsOf: fileURL)\nlet people = try JSONSerialization.jsonObject(with: jsonData) as! [[String: Any]]\n\nfor person in people {\n  let age = person[\"age\"] as! Int\n  let firstName = person[\"first_name\"] as! String\n\n  print(\"Hello, \\(age) year old \\(firstName)\")\n}",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "read_json_file.raku",
                        "code": "use v6;\nuse JSON::Fast;\n\nmy $file-path = \"people.json\";\n\nmy $people = from-json $file-path.IO.slurp;\n\nfor @$people -> $person {\n    say \"Hello, {$person<age>} year old {$person<first_name>}\";\n}",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "read_json_file.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\nuse std::fs;\n\nextern crate json;\n\nfn main() {\n    let filename = \"people.json\";\n\n    let json_string = fs::read_to_string(filename).unwrap();\n    let parsed_json = json::parse(&json_string).unwrap();\n\n    for person in parsed_json.members() {\n        let age = person[\"age\"].as_u32().unwrap();\n        let first_name = person[\"first_name\"].as_str().unwrap();\n        println!(\"Hello, {} year old {}\", age, first_name);\n    }\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_outputting_data",
                "group": "JSON",
                "doc_str": "Create and output JSON",
                "doc_str_first_line": "Create and output JSON",
                "implementations": [
                    {
                        "file_name": "json_outputting_data.py",
                        "code": "import json\n\nfirst_json_object = {\n    \"true\": True,\n    \"false\": False,\n    \"zero\": 0,\n    \"int\": 42,\n    \"float\": 3.14,\n    \"null\": None,\n    \"empty string\": \"\",\n    \"a string with non-ascii characters\": \"hello \\n \\0 \\x01 world 🥸\"\n}\n\nsecond_json_object = {\n    \"array of strings\": [\"abc\", \"def\", \"ghi\", \"jkl\"],\n    \"array of numbers\": [13, 42, 9000, -7],\n    \"array of nothing\": [],\n    \"array of mixed\": [13, \"def\", None, False, [\"a\"], {\"o\": 1}],\n    \"array of objects\": [\n        {\"name\": \"Bob Barker\", \"age\": 84},\n        {\"address1\": \"123 Main St\", \"address2\": \"Apt 1\"}\n    ],\n    \"array of arrays\": [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"e\", \"f\"]\n    ]\n}\n\nthird_json_object = {\n    \"objects\": {\n        \"nested\": {\n            \"objects\": {\n                \"are\": \"supported\"\n            }\n        }\n    }\n}\n\nprint(json.dumps(first_json_object))\nprint(json.dumps(second_json_object))\nprint(json.dumps(third_json_object))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.rb",
                        "code": "require 'json'\n\nputs JSON.generate({\n    \"true\" => true,\n    \"false\" => false,\n    \"zero\" => 0,\n    \"int\" => 42,\n    \"float\" => 3.14,\n    \"null\" => nil,\n    \"empty string\" => \"\",\n    \"a string with non-ascii characters\" => \"hello \\n \\0 \\u0001 world 🥸\",\n})\n\nputs JSON.generate({\n    \"array of strings\" => [\"abc\", \"def\", \"ghi\", \"jkl\"],\n    \"array of numbers\" => [13, 42, 9000, -7],\n    \"array of nothing\" => [],\n    \"array of mixed\" => [13, \"def\", nil, false, [\"a\"], { \"o\" => 1}],\n    \"array of objects\" => [\n        { \"name\" => \"Bob Barker\", \"age\" => 84 },\n        { \"address1\" => \"123 Main St\", \"address2\" => \"Apt 1\" },\n    ],\n    \"array of arrays\" => [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"e\", \"f\"],\n    ],\n})\n\nputs JSON.generate({\n    \"objects\" => { \"nested\" => { \"objects\" => { \"are\" => \"supported\" } } },\n})",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.mjs",
                        "code": "const json1 = JSON.stringify({\n    \"true\": true,\n    \"false\": false,\n    \"zero\": 0,\n    \"int\": 42,\n    \"float\": 3.14,\n    \"null\": null,\n    \"empty string\": \"\",\n    \"a string with non-ascii characters\": \"hello \\n \\0 \\u0001 world 🥸\"\n}, null);\n\nconst json2 = JSON.stringify({\n    \"array of strings\": [\"abc\", \"def\", \"ghi\", \"jkl\"],\n    \"array of numbers\": [13, 42, 9000, -7],\n    \"array of nothing\": [],\n    \"array of mixed\": [13, \"def\", null, false, [\"a\"], { \"o\": 1 }],\n    \"array of objects\": [\n        { \"name\": \"Bob Barker\", \"age\": 84 },\n        { \"address1\": \"123 Main St\", \"address2\": \"Apt 1\" }\n    ],\n    \"array of arrays\": [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"e\", \"f\"]\n    ]\n}, null);\n\nconst json3 = JSON.stringify({\n    \"objects\": { \"nested\": { \"objects\": { \"are\": \"supported\" } } }\n}, null);\n\nconsole.log(json1);\nconsole.log(json2);\nconsole.log(json3);",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.mjs",
                        "code": "const json1 = JSON.stringify({\n    \"true\": true,\n    \"false\": false,\n    \"zero\": 0,\n    \"int\": 42,\n    \"float\": 3.14,\n    \"null\": null,\n    \"empty string\": \"\",\n    \"a string with non-ascii characters\": \"hello \\n \\0 \\u0001 world 🥸\"\n}, null);\n\nconst json2 = JSON.stringify({\n    \"array of strings\": [\"abc\", \"def\", \"ghi\", \"jkl\"],\n    \"array of numbers\": [13, 42, 9000, -7],\n    \"array of nothing\": [],\n    \"array of mixed\": [13, \"def\", null, false, [\"a\"], { \"o\": 1 }],\n    \"array of objects\": [\n        { \"name\": \"Bob Barker\", \"age\": 84 },\n        { \"address1\": \"123 Main St\", \"address2\": \"Apt 1\" }\n    ],\n    \"array of arrays\": [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"e\", \"f\"]\n    ]\n}, null);\n\nconst json3 = JSON.stringify({\n    \"objects\": { \"nested\": { \"objects\": { \"are\": \"supported\" } } }\n}, null);\n\nconsole.log(json1);\nconsole.log(json2);\nconsole.log(json3);",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.php",
                        "code": "<?php\n\n$firstJsonObject = [\n    \"true\" => true,\n    \"false\" => false,\n    \"zero\" => 0,\n    \"int\" => 42,\n    \"float\" => 3.14,\n    \"null\" => null,\n    \"empty string\" => \"\",\n    \"a string with non-ascii characters\" => \"hello \\n \\0 \\x01 world 🥸\"\n];\n\n$secondJsonObject = [\n    \"array of strings\" => [\"abc\", \"def\", \"ghi\", \"jkl\"],\n    \"array of numbers\" => [13, 42, 9000, -7],\n    \"array of nothing\" => [],\n    \"array of mixed\" => [13, \"def\", null, false, [\"a\"], [\"o\" => 1]],\n    \"array of objects\" => [\n        [\"name\" => \"Bob Barker\", \"age\" => 84],\n        [\"address1\" => \"123 Main St\", \"address2\" => \"Apt 1\"]\n    ],\n    \"array of arrays\" => [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"e\", \"f\"]\n    ]\n];\n\n$thirdJsonObject = [\n    \"objects\" => [\n        \"nested\" => [\n            \"objects\" => [\n                \"are\" => \"supported\"\n            ]\n        ]\n    ]\n];\n\necho json_encode($firstJsonObject, JSON_UNESCAPED_UNICODE) . \"\\n\";\necho json_encode($secondJsonObject, JSON_UNESCAPED_UNICODE) . \"\\n\";\necho json_encode($thirdJsonObject, JSON_UNESCAPED_UNICODE) . \"\\n\";",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.R",
                        "code": "library(jsonlite)\n\nfirst_json_object <- list(\n  true = TRUE,\n  false = FALSE,\n  zero = 0,\n  int = 42,\n  float = 3.14,\n  null = NA,\n  \"empty string\" = \"\",\n  # b/c R can't handle the null character in strings, we use @NULL@ to represent\n  # it then replace it with the actual JSON-encoded null character later\n  \"a string with non-ascii characters\" = \"hello \\n @NULL@ \\u0001 world 🥸\"\n)\n\nsecond_json_object <- list(\n  \"array of strings\" = c(\"abc\", \"def\", \"ghi\", \"jkl\"),\n  \"array of numbers\" = c(13, 42, 9000, -7),\n  \"array of nothing\" = list(),\n  \"array of mixed\" = list(13, \"def\", NA, FALSE, list(\"a\"), list(o = 1)),\n  \"array of objects\" = list(\n    list(name = \"Bob Barker\", age = 84),\n    list(address1 = \"123 Main St\", address2 = \"Apt 1\")\n  ),\n  \"array of arrays\" = list(\n    c(\"a\", \"b\", \"c\"),\n    c(\"d\", \"e\", \"f\")\n  )\n)\n\nthird_json_object <- list(\n  objects = list(\n    nested = list(\n      objects = list(\n        are = \"supported\"\n      )\n    )\n  )\n)\n\nfirst_json_string <- gsub(\"@NULL@\", \"\\\\\\\\u0000\", toJSON(first_json_object, auto_unbox = TRUE, pretty = FALSE))\nsecond_json_string <- toJSON(second_json_object, auto_unbox = TRUE, pretty = FALSE)\nthird_json_string <- toJSON(third_json_object, auto_unbox = TRUE, pretty = FALSE)\n\ncat(first_json_string, \"\\n\")\ncat(second_json_string, \"\\n\")\ncat(third_json_string, \"\\n\")",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nmy $json = JSON->new->utf8;\n\nmy $data1 = {\n    \"true\" => JSON::true,\n    \"false\" => JSON::false,\n    \"zero\" => 0,\n    \"int\" => 42,\n    \"float\" => 3.14,\n    \"null\" => undef,\n    \"empty string\" => \"\",\n    \"a string with non-ascii characters\" => \"hello \\n \\0 \\x{0001} world \\N{U+1F978}\",\n};\n\nprint $json->encode($data1) . \"\\n\";\n\nmy $data2 = {\n    \"array of strings\" => [\"abc\", \"def\", \"ghi\", \"jkl\"],\n    \"array of numbers\" => [13, 42, 9000, -7],\n    \"array of nothing\" => [],\n    \"array of mixed\" => [13, \"def\", undef, JSON::false, [\"a\"], { \"o\" => 1 }],\n    \"array of objects\" => [\n        { \"name\" => \"Bob Barker\", \"age\" => 84 },\n        { \"address1\" => \"123 Main St\", \"address2\" => \"Apt 1\" },\n    ],\n    \"array of arrays\" => [\n        [\"a\", \"b\", \"c\"],\n        [\"d\", \"e\", \"f\"],\n    ],\n};\n\nprint $json->encode($data2) . \"\\n\";\n\nmy $data3 = {\n    \"objects\" => { \"nested\" => { \"objects\" => { \"are\" => \"supported\" } } },\n};\n\nprint $json->encode($data3) . \"\\n\";",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonOutputtingData.java",
                        "code": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.*;\n\npublic class JsonOutputtingData {\n\n    public static void main(String[] args) throws Exception {\n        var firstJsonObject = new HashMap<>(); // Can't use Map.of() because it doesn't support null values\n        firstJsonObject.put(\"true\", true);\n        firstJsonObject.put(\"false\", false);\n        firstJsonObject.put(\"zero\", 0);\n        firstJsonObject.put(\"int\", 42);\n        firstJsonObject.put(\"float\", 3.14);\n        firstJsonObject.put(\"null\", null);\n        firstJsonObject.put(\"empty string\", \"\");\n        firstJsonObject.put(\"a string with non-ascii characters\", \"hello \\n \\0 \\u0001 world 🥸\");\n\n        var secondJsonObject = Map.of(\n            \"array of strings\", List.of(\"abc\", \"def\", \"ghi\", \"jkl\"),\n            \"array of numbers\", List.of(13, 42, 9000, -7),\n            \"array of nothing\", List.of(),\n            \"array of mixed\", Arrays.asList(13, \"def\", null, false, List.of(\"a\"), Map.of(\"o\", 1)),\n            \"array of objects\", List.of(\n                Map.of(\n                    \"name\", \"Bob Barker\",\n                    \"age\", 84\n                ),\n                Map.of(\n                    \"address1\", \"123 Main St\",\n                    \"address2\", \"Apt 1\"\n                )\n            ),\n            \"array of arrays\", List.of(\n                List.of(\"a\", \"b\", \"c\"),\n                List.of(\"d\", \"e\", \"f\")\n            )\n        );\n\n        var thirdJsonObject = Map.of(\n            \"objects\", Map.of(\n                \"nested\", Map.of(\n                    \"objects\", Map.of(\n                        \"are\", \"supported\"\n                    )\n                )\n            )\n        );\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT);\n        printJson(objectMapper, firstJsonObject);\n        printJson(objectMapper, secondJsonObject);\n        printJson(objectMapper, thirdJsonObject);\n    }\n\n    private static void printJson(ObjectMapper objectMapper, Object data) throws JsonProcessingException {\n        String jsonData = objectMapper.writeValueAsString(data);\n        System.out.println(jsonData);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.sh",
                        "code": "# jo can't handle the null character (\\0) so we use jq to add it as a workaraound\nobject_with_nonascii_string='{ \"a string with non-ascii characters\": \"hello \\n \\u0000 \\u0001 world 🥸\" }'\n\njo \\\n  true=true false=false zero=0 int=42 float=3.14 null=null  -s \"empty string\"=\"\" \\\n  | jq -c \". + $object_with_nonascii_string\"\n\njo \\\n  \"array of strings=$(\n    jo -a abc def ghi jkl\n  )\" \\\n  \"array of numbers=$(\n    jo -a 13 42 9000 -7\n  )\" \\\n  \"array of nothing=$(\n    jo -a </dev/null\n  )\" \\\n  \"array of mixed=$(\n    jo -a 13 def null false \"$(jo -a a)\" \"$(jo o=1)\"\n  )\" \\\n  \"array of objects=$(\n    jo -a \\\n      \"$(jo name=\"Bob Barker\" age=84)\" \\\n      \"$(jo address1=\"123 Main St\" address2=\"Apt 1\")\"\n  )\" \\\n  \"array of arrays=$(\n    jo -a \\\n      \"$(jo -a a b c)\" \\\n      \"$(jo -a d e f)\"\n  )\"\n\njo objects=\"$(\n  jo nested=\"$(\n    jo objects=\"$(\n      jo are=\"supported\"\n    )\"\n  )\"\n)\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.lua",
                        "code": "local json = require(\"dkjson\")\n\nlocal firstJsonObject = {\n    [\"true\"] = true,\n    [\"false\"] = false,\n    [\"zero\"] = 0,\n    [\"int\"] = 42,\n    [\"float\"] = 3.14,\n    [\"null\"] = json.null,\n    [\"empty string\"] = \"\",\n    [\"a string with non-ascii characters\"] = \"hello \\n \\0 \\u{0001} world 🥸\"\n}\n\nlocal secondJsonObject = {\n    [\"array of strings\"] = {\"abc\", \"def\", \"ghi\", \"jkl\"},\n    [\"array of numbers\"] = {13, 42, 9000, -7},\n    [\"array of nothing\"] = {},\n    [\"array of mixed\"] = {13, \"def\", json.null, false, {\"a\"}, {[\"o\"] = 1}},\n    [\"array of objects\"] = {\n        {[\"name\"] = \"Bob Barker\", [\"age\"] = 84},\n        {[\"address1\"] = \"123 Main St\", [\"address2\"] = \"Apt 1\"}\n    },\n    [\"array of arrays\"] = {\n        {\"a\", \"b\", \"c\"},\n        {\"d\", \"e\", \"f\"}\n    }\n}\n\nlocal thirdJsonObject = {\n    [\"objects\"] = {\n        [\"nested\"] = {\n            [\"objects\"] = {\n                [\"are\"] = \"supported\"\n            }\n        }\n    }\n}\n\nprint(json.encode(firstJsonObject))\nprint(json.encode(secondJsonObject))\nprint(json.encode(thirdJsonObject))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonOutputtingData.cs",
                        "code": "using System;\nusing System.Collections.Generic;\nusing System.Text.Json;\n\nclass JsonOutputtingData\n{\n    public static void Main(string[] args)\n    {\n        var firstJsonObject = new Dictionary<string, object> {\n            [\"true\"] = true,\n            [\"false\"] = false,\n            [\"zero\"] = 0,\n            [\"int\"] = 42,\n            [\"float\"] = 3.14,\n            [\"null\"] = (object)null,\n            [\"empty string\"] = \"\",\n            [\"a string with non-ascii characters\"] = \"hello \\n \\0 \\u0001 world 🥸\"\n        };\n\n        var secondJsonObject = new Dictionary<string, object> {\n            [\"array of strings\"] = new[] { \"abc\", \"def\", \"ghi\", \"jkl\" },\n            [\"array of numbers\"] = new[] { 13, 42, 9000, -7 },\n            [\"array of nothing\"] = Array.Empty<object>(),\n            [\"array of mixed\"] = new object[] { 13, \"def\", null, false, new[] { \"a\" }, new Dictionary<string, object> { [\"o\"] = 1 } },\n            [\"array of objects\"] = new[]\n            {\n                new Dictionary<string, object>\n                {\n                    [\"name\"] = \"Bob Barker\",\n                    [\"age\"] = 84\n                },\n                new Dictionary<string, object> {\n                    [\"address1\"] = \"123 Main St\",\n                    [\"address2\"] = \"Apt 1\"\n                }\n            },\n            [\"array of arrays\"] = new[] {\n                new[] { \"a\", \"b\", \"c\" },\n                new[] { \"d\", \"e\", \"f\" }\n            }\n        };\n\n        var thirdJsonObject = new Dictionary<string, object>\n        {\n            [\"objects\"] = new Dictionary<string, object>\n            {\n                [\"nested\"] = new Dictionary<string, object>\n                {\n                    [\"objects\"] = new Dictionary<string, object>\n                    {\n                        [\"are\"] = \"supported\"\n                    }\n                }\n            }\n        };\n\n        Console.WriteLine(JsonSerializer.Serialize(firstJsonObject));\n        Console.WriteLine(JsonSerializer.Serialize(secondJsonObject));\n        Console.WriteLine(JsonSerializer.Serialize(thirdJsonObject));\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\nfunc main() {\n\tfirstJsonObject := map[string]interface{}{\n\t\t\"true\":                               true,\n\t\t\"false\":                              false,\n\t\t\"zero\":                               0,\n\t\t\"int\":                                42,\n\t\t\"float\":                              3.14,\n\t\t\"null\":                               nil,\n\t\t\"empty string\":                       \"\",\n\t\t\"a string with non-ascii characters\": \"hello \\n \\x00 \\u0001 world 🥸\",\n\t}\n\n\tsecondJsonObject := map[string]interface{}{\n\t\t\"array of strings\": []string{\"abc\", \"def\", \"ghi\", \"jkl\"},\n\t\t\"array of numbers\": []int{13, 42, 9000, -7},\n\t\t\"array of nothing\": []interface{}{},\n\t\t\"array of mixed\": []interface{}{\n\t\t\t13, \"def\", nil, false, []string{\"a\"}, map[string]interface{}{\"o\": 1},\n\t\t},\n\t\t\"array of objects\": []interface{}{\n\t\t\tmap[string]interface{}{\"name\": \"Bob Barker\", \"age\": 84},\n\t\t\tmap[string]interface{}{\"address1\": \"123 Main St\", \"address2\": \"Apt 1\"},\n\t\t},\n\t\t\"array of arrays\": []interface{}{\n\t\t\t[]string{\"a\", \"b\", \"c\"},\n\t\t\t[]string{\"d\", \"e\", \"f\"},\n\t\t},\n\t}\n\n\tthirdJsonObject := map[string]interface{}{\n\t\t\"objects\": map[string]interface{}{\n\t\t\t\"nested\": map[string]interface{}{\n\t\t\t\t\"objects\": map[string]interface{}{\n\t\t\t\t\t\"are\": \"supported\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tprintJSON(firstJsonObject)\n\tprintJSON(secondJsonObject)\n\tprintJSON(thirdJsonObject)\n}\n\nfunc printJSON(data interface{}) {\n\tjsonData, _ := json.Marshal(data)\n\tfmt.Println(string(jsonData))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.swift",
                        "code": "import Foundation\n\nlet firstJsonObject: [String: Any] = [\n  \"true\": true,\n  \"false\": false,\n  \"zero\": 0,\n  \"int\": 42,\n  \"float\": 3.14,\n  \"null\": NSNull(),\n  \"empty string\": \"\",\n  \"a string with non-ascii characters\": \"hello \\n \\0 \\u{0001} world 🥸\",\n]\n\nlet secondJsonObject: [String: Any] = [\n  \"array of strings\": [\"abc\", \"def\", \"ghi\", \"jkl\"],\n  \"array of numbers\": [13, 42, 9000, -7],\n  \"array of nothing\": [],\n  \"array of mixed\": [13, \"def\", NSNull(), false, [\"a\"], [\"o\": 1]],\n  \"array of objects\": [\n    [\"name\": \"Bob Barker\", \"age\": 84],\n    [\"address1\": \"123 Main St\", \"address2\": \"Apt 1\"],\n  ],\n  \"array of arrays\": [\n    [\"a\", \"b\", \"c\"],\n    [\"d\", \"e\", \"f\"],\n  ],\n]\n\nlet thirdJsonObject: [String: Any] = [\n  \"objects\": [\n    \"nested\": [\n      \"objects\": [\n        \"are\": \"supported\"\n      ]\n    ]\n  ]\n]\n\nfunc jsonString(from dictionary: [String: Any]) -> String {\n  let jsonData = try! JSONSerialization.data(withJSONObject: dictionary, options: [])\n  return String(data: jsonData, encoding: .utf8)!\n}\n\nprint(jsonString(from: firstJsonObject))\nprint(jsonString(from: secondJsonObject))\nprint(jsonString(from: thirdJsonObject))",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.raku",
                        "code": "use JSON::Fast;\n\nmy %first-json-object = {\n    'true'                    => True,\n    'false'                   => False,\n    'zero'                    => 0,\n    'int'                     => 42,\n    'float'                   => 3.14,\n    'null'                    => Nil,\n    'empty string'            => '',\n    'a string with non-ascii characters' => \"hello \\n \\0 \\x01 world 🥸\"\n};\n\nmy %second-json-object = {\n    'array of strings' => ['abc', 'def', 'ghi', 'jkl'],\n    'array of numbers' => [13, 42, 9000, -7],\n    'array of nothing' => [],\n    'array of mixed'   => [13, 'def', Nil, False, ['a'], {'o' => 1 }],\n    'array of objects' => [\n        { 'name' => 'Bob Barker', 'age' => 84 },\n        { 'address1' => '123 Main St', 'address2' => 'Apt 1' },\n    ],\n    'array of arrays' => [\n        ['a', 'b', 'c'],\n        ['d', 'e', 'f']\n    ]\n};\n\nmy %third-json-object = {\n    'objects' => {\n        'nested' => {\n            'objects' => {\n                'are' => 'supported'\n            }\n        }\n    }\n};\n\nsay to-json(%first-json-object, :pretty(False));\nsay to-json(%second-json-object, :pretty(False));\nsay to-json(%third-json-object, :pretty(False));",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_outputting_data.rs",
                        "code": "// cargo-deps: json=\"0.12.4\"\n\nextern crate json;\n\nuse json::{array, object, JsonValue};\n\nfn main() {\n    let first_json_object = object! {\n        \"true\" => true,\n        \"false\" => false,\n        \"zero\" => 0,\n        \"int\" => 42,\n        \"float\" => 3.14,\n        \"null\" => JsonValue::Null,\n        \"empty string\" => \"\",\n        \"a string with non-ascii characters\" => \"hello \\n \\0 \\u{0001} world 🥸\"\n    };\n\n    let second_json_object = object! {\n        \"array of strings\" => array![\"abc\", \"def\", \"ghi\", \"jkl\"],\n        \"array of numbers\" => array![13, 42, 9000, -7],\n        \"array of nothing\" => array![],\n        \"array of mixed\" => array![13, \"def\", JsonValue::Null, false, array![\"a\"], object! { \"o\" => 1 }],\n        \"array of objects\" => array![\n            object! { \"name\" => \"Bob Barker\", \"age\" => 84 },\n            object! { \"address1\" => \"123 Main St\", \"address2\" => \"Apt 1\" }\n        ],\n        \"array of arrays\" => array![\n            array![\"a\", \"b\", \"c\"],\n            array![\"d\", \"e\", \"f\"]\n        ]\n    };\n\n    let third_json_object = object! {\n        \"objects\" => object! {\n            \"nested\" => object! {\n                \"objects\" => object! {\n                    \"are\" => \"supported\"\n                }\n            }\n        }\n    };\n\n    println!(\"{}\", first_json_object);\n    println!(\"{}\", second_json_object);\n    println!(\"{}\", third_json_object);\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_array",
                "group": "JSON",
                "doc_str": "Create and output a JSON array of strings",
                "doc_str_first_line": "Create and output a JSON array of strings",
                "implementations": [
                    {
                        "file_name": "json_array.py",
                        "code": "import json\nimport sys\n\nmy_strings = sys.argv[1:]\n\nprint(json.dumps(my_strings))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_array.rb",
                        "code": "require 'json'\n\nmy_strings = ARGV\n\nputs JSON.generate(my_strings)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_array.mjs",
                        "code": "const myStrings = process.argv.slice(2)\n\nconsole.log(JSON.stringify(myStrings))",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_array.mjs",
                        "code": "const myStrings = Deno.args\n\nconsole.log(JSON.stringify(myStrings))",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_array.php",
                        "code": "<?php\n\n$myStrings = array_slice($argv, 1);\n\necho json_encode($myStrings);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_array.R",
                        "code": "library(jsonlite)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\ncat(toJSON(args))",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_array.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nprint encode_json(\\@ARGV);",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonArray.java",
                        "code": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\npublic class JsonArray {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Usage: java JsonArray <string1> <string2> ...\");\n            System.exit(1);\n        }\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n\n        for (String arg : args) {\n            arrayNode.add(arg);\n        }\n\n        String jsonArrayString = arrayNode.toString();\n\n        System.out.println(jsonArrayString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_array.sh",
                        "code": "jo -a \"$@\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_array.lua",
                        "code": "local cjson = require(\"dkjson\")\n\nlocal args = {}\nfor i = 1, #arg do\n    table.insert(args, arg[i])\nend\n\nprint(cjson.encode(args))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonArray.cs",
                        "code": "using System;\nusing System.Text.Json;\n\nclass JsonArray{\n    public static void Main(string[] args){\n        string[] inputArray = args;\n\n        string jsonString = JsonSerializer.Serialize(inputArray);\n\n        Console.WriteLine(jsonString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_array.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\targs := os.Args[1:]\n\n\tvar jsonArray []string\n\n\tfor _, arg := range args {\n\t\tjsonArray = append(jsonArray, arg)\n\t}\n\n\tjsonArrayBytes, _ := json.Marshal(jsonArray)\n\n\tfmt.Println(string(jsonArrayBytes))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_array.swift",
                        "code": "import Foundation\n\nlet myStrings = Array(CommandLine.arguments.dropFirst())\nlet jsonData = try JSONSerialization.data(withJSONObject: myStrings)\nprint(String(data: jsonData, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_array.raku",
                        "code": "use v6;\n\nuse JSON::Fast;\n\nsay to-json(@*ARGS);",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_array.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\n\nuse json::JsonValue;\nuse std::env;\nextern crate json;\n\nfn main() {\n    let substrings: Vec<String> = env::args().skip(1).collect();\n    let json_array: JsonValue = substrings.into();\n    println!(\"{}\", json_array.dump());\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_numbers",
                "group": "JSON",
                "doc_str": "Create and output a JSON array of numbers",
                "doc_str_first_line": "Create and output a JSON array of numbers",
                "implementations": [
                    {
                        "file_name": "json_numbers.py",
                        "code": "import json\nimport sys\n\n\nmy_strings = sys.argv[1:]\n\nstring_lengths = [len(string) for string in my_strings]\n\nprint(json.dumps(string_lengths))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_numbers.rb",
                        "code": "require 'json'\n\nmy_strings = ARGV\n\nstring_lengths = my_strings.map(&:length)\n\nputs JSON.generate(string_lengths)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_numbers.mjs",
                        "code": "const myStrings = process.argv.slice(2)\n\nconst stringLengths = myStrings.map((string) => string.length)\n\nconst jsonString = JSON.stringify(stringLengths)\n\nconsole.log(jsonString)",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_numbers.mjs",
                        "code": "const myStrings = Deno.args\n\nconst stringLengths = myStrings.map((string) => string.length)\n\nconst jsonString = JSON.stringify(stringLengths)\n\nconsole.log(jsonString)",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_numbers.php",
                        "code": "<?php\n\n$myStrings = array_slice($argv, 1);\n\n$stringLengths = array_map('strlen', $myStrings);\n\necho json_encode($stringLengths);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_numbers.R",
                        "code": "library(jsonlite)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nstring_lengths <- sapply(args, nchar)\n\ncat(toJSON(string_lengths))",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_numbers.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nprint encode_json([map { length } @ARGV]);",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonNumbers.java",
                        "code": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\npublic class JsonNumbers {\n    public static void main(String[] args) throws Exception{\n        if (args.length == 0) {\n            System.out.println(\"Usage: java JsonNumbers <string1> <string2> ...\");\n            System.exit(1);\n        }\n        ObjectMapper objectMapper = new ObjectMapper();\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n\n        for (String str : args) {\n            arrayNode.add(str.length());\n        }\n\n        String jsonArrayString = objectMapper.writeValueAsString(arrayNode);\n        System.out.println(jsonArrayString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_numbers.sh",
                        "code": "lengths=()\n\nfor arg in \"$@\"; do\n  lengths+=(\"${#arg}\")\ndone\n\njo -a \"${lengths[@]}\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_numbers.lua",
                        "code": "local cjson = require(\"dkjson\")\n\nlocal lengths = {}\nfor i = 1, #arg do\n    table.insert(lengths, string.len(arg[i]))\nend\n\nprint(cjson.encode(lengths))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonNumbers.cs",
                        "code": "using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Text.Json;\n\nclass JsonNumbers\n{\n    public static void Main(string[] args)\n    {\n        var numbers = args.Select(arg => arg.Length).ToArray();\n\n        string jsonArrayString = JsonSerializer.Serialize(numbers);\n        Console.WriteLine(jsonArrayString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_numbers.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\targs := os.Args[1:]\n\n\tvar lengths []int\n\n\tfor _, arg := range args {\n\t\tlengths = append(lengths, len(arg))\n\t}\n\n\tjsonArrayBytes, _ := json.Marshal(lengths)\n\n\tfmt.Println(string(jsonArrayBytes))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_numbers.swift",
                        "code": "import Foundation\n\nlet myStrings = CommandLine.arguments.dropFirst()\n\nlet stringLengths = myStrings.map { $0.count }\n\nlet jsonData = try JSONSerialization.data(withJSONObject: stringLengths)\nprint(String(data: jsonData, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_numbers.raku",
                        "code": "use v6;\n\nuse JSON::Fast;\n\nsay to-json(@*ARGS.map(*.chars));",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_numbers.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\n\nuse json::JsonValue;\nuse std::env;\n\nextern crate json;\n\nfn main() {\n    let args = env::args().skip(1);\n\n    let json_array: JsonValue = args\n        .map(|arg| arg.len().into())\n        .collect::<Vec<JsonValue>>()\n        .into();\n\n    println!(\"{}\", json_array.dump());\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_stdout_object",
                "group": "JSON",
                "doc_str": "Create and output a JSON object",
                "doc_str_first_line": "Create and output a JSON object",
                "implementations": [
                    {
                        "file_name": "json_stdout_object.py",
                        "code": "import json\nimport sys\n\nmy_strings = sys.argv[1:]\n\nstring_length_dict = {string: len(string) for string in my_strings}\n\nprint(json.dumps(string_length_dict))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.rb",
                        "code": "require 'json'\n\nmy_strings = ARGV\n\nstring_length_dict = my_strings.to_h { |string| [string, string.length] }\n\nputs JSON.generate(string_length_dict)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.mjs",
                        "code": "const myStrings = process.argv.slice(2)\n\nconst stringLengthDict = {}\n\nfor (const string of myStrings) {\n  stringLengthDict[string] = string.length\n}\n\nconsole.log(JSON.stringify(stringLengthDict))",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.mjs",
                        "code": "const myStrings = Deno.args\n\nconst stringLengthDict = {}\n\nfor (const string of myStrings) {\n  stringLengthDict[string] = string.length\n}\n\nconsole.log(JSON.stringify(stringLengthDict))",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.php",
                        "code": "<?php\n$myStrings = array_slice($argv, 1);\n\n$stringLengthDict = array_combine($myStrings, array_map('strlen', $myStrings));\n\necho json_encode($stringLengthDict);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.R",
                        "code": "library(jsonlite)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nstring_length <- list()\nfor (string in args) {\n  string_length[[string]] <- nchar(string)\n}\n\ncat(toJSON(string_length, auto_unbox = TRUE))",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nprint encode_json({ map { $_ => length } @ARGV });",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonStdoutObject.java",
                        "code": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\npublic class JsonStdoutObject {\n    public static void main(String[] args) throws Exception{\n        var objectMapper = new ObjectMapper();\n\n        var jsonObject = objectMapper.createObjectNode();\n\n        for (String string : args) {\n            jsonObject.put(string, string.length());\n        }\n\n        var jsonString = objectMapper.writeValueAsString(jsonObject);\n        System.out.println(jsonString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.sh",
                        "code": "json_object='{}'\n\nfor arg in \"$@\"; do\n    length=${#arg}\n    json_object=$(<<<\"$json_object\" jo -f - \"$arg=$length\")\ndone\n\necho \"$json_object\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.lua",
                        "code": "local cjson = require(\"dkjson\")\n\nlocal dict = {}\n\nfor i = 1, #arg do\n    dict[arg[i]] = arg[i]:len()\nend\n\nprint(cjson.encode(dict))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonStdoutObject.cs",
                        "code": "using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Text.Json;\n\nclass JsonStdoutObject{\n    public static void Main(string[] args){\n        Dictionary<string, int> stringLengthDict = new Dictionary<string, int>();\n\n        foreach (string str in args){\n            stringLengthDict[str] = str.Length;\n        }\n\n        string jsonString = JsonSerializer.Serialize(stringLengthDict);\n        Console.WriteLine(jsonString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\targs := os.Args[1:]\n\n\tstringLengthMap := make(map[string]int)\n\n\tfor _, arg := range args {\n\t\tstringLengthMap[arg] = len(arg)\n\t}\n\n\tjsonObjectBytes, _ := json.Marshal(stringLengthMap)\n\tfmt.Println(string(jsonObjectBytes))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.swift",
                        "code": "import Foundation\n\nlet myStrings = CommandLine.arguments.dropFirst()\nlet stringLengthDict = Dictionary(uniqueKeysWithValues: myStrings.map { ($0, $0.count) })\n\nlet jsonData = try JSONSerialization.data(withJSONObject: stringLengthDict)\nprint(String(data: jsonData, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.raku",
                        "code": "use v6;\nuse JSON::Fast;\n\nmy %data = @*ARGS.map: { $_ => .chars };\nsay to-json(%data);",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_stdout_object.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\n\nuse json::JsonValue;\nuse std::env;\n\nextern crate json;\nfn main() {\n    let args = env::args().skip(1);\n    let mut json_object = JsonValue::new_object();\n\n    for arg in args {\n        json_object[arg] = arg.len().into();\n    }\n\n    println!(\"{}\", json_object.dump());\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_object_with_array_values",
                "group": "JSON",
                "doc_str": "Create and output a JSON object with arrays of strings as values",
                "doc_str_first_line": "Create and output a JSON object with arrays of strings as values",
                "implementations": [
                    {
                        "file_name": "json_object_with_array_values.py",
                        "code": "import json\nimport sys\n\nmy_strings = sys.argv[1:]\n\nstring_letters_dict = {string: [s.upper() for s in string] for string in my_strings}\n\nprint(json.dumps(string_letters_dict))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.rb",
                        "code": "require 'json'\n\nmy_strings = ARGV\n\nstring_letters_dict = my_strings.to_h { |string| [string, string.upcase.chars] }\n\nputs JSON.generate(string_letters_dict)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.mjs",
                        "code": "const myStrings = process.argv.slice(2)\n\nconst stringLettersDict = {}\n\nfor (const string of myStrings) {\n    const uppercaseLetters = [...string].map((s) => s.toUpperCase())\n    stringLettersDict[string] = uppercaseLetters\n}\n\nconsole.log(JSON.stringify(stringLettersDict))",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.mjs",
                        "code": "const myStrings = Deno.args\n\nconst stringLettersDict = {}\n\nfor (const string of myStrings) {\n    const uppercaseLetters = [...string].map((s) => s.toUpperCase())\n    stringLettersDict[string] = uppercaseLetters\n}\n\nconsole.log(JSON.stringify(stringLettersDict))",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.php",
                        "code": "<?php\n$myStrings = array_slice($argv, 1);\n\n$stringLettersDict = array_combine(\n    $myStrings, array_map(\n        fn($str) => str_split(strtoupper($str)), $myStrings\n    )\n);\n\necho json_encode($stringLettersDict);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.R",
                        "code": "library(jsonlite)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nstring_letters <- list()\nfor (string in args) {\n  letters <- toupper(strsplit(string, split=\"\")[[1]])\n  string_letters[[string]] <- letters\n}\n\ncat(toJSON(string_letters))",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nprint JSON->new\n    ->canonical(1)\n    ->encode({ map { $_ => [split //, uc($_)] } @ARGV });",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonObjectWithArrayValues.java",
                        "code": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\npublic class JsonObjectWithArrayValues {\n    public static void main(String[] args) throws Exception {\n        var objectMapper = new ObjectMapper();\n\n        var jsonObject = objectMapper.createObjectNode();\n\n        for (String str : args) {\n            var lettersArray = objectMapper.createArrayNode();\n            str.toUpperCase().chars().forEach(c -> lettersArray.add(String.valueOf((char) c)));\n            jsonObject.set(str, lettersArray);\n        }\n\n        String jsonString = objectMapper.writeValueAsString(jsonObject);\n        System.out.println(jsonString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.sh",
                        "code": "json_object='{}'\n\nfor arg in \"$@\"; do\n    upper_chars=$(<<<\"$arg\" tr '[:lower:]' '[:upper:]' | fold -w1)\n\n    json_array=$(jo -a ${upper_chars[@]})\n\n    # merge this object with the current object\n    json_object=\"$(<<<\"$json_object\" jo -f - \"$arg\"=\"$json_array\")\"\ndone\n\necho \"$json_object\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.lua",
                        "code": "local cjson = require(\"dkjson\")\n\nlocal string_letters_dict = {}\n\nfor i = 1, #arg do\n    local string = arg[i]\n    local letters = {}\n\n    for letter in string:gmatch(\".\") do\n        table.insert(letters, letter:upper())\n    end\n    string_letters_dict[string] = letters\nend\n\nprint(cjson.encode(string_letters_dict))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonObjectWithArrayValues.cs",
                        "code": "using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Text.Json;\n\nclass JsonObjectWithArrayValues{\n    public static void Main(string[] args){\n        var jsonObject = args.ToDictionary(\n            str => str,\n            str => str.ToUpper().Select(c => c.ToString()).ToList()\n        );\n\n        string jsonString = JsonSerializer.Serialize(jsonObject);\n        Console.WriteLine(jsonString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\targs := os.Args[1:]\n\n\tjsonObject := make(map[string][]string)\n\n\tfor _, str := range args {\n\t\tvar lettersArray []string\n\t\tfor _, char := range strings.ToUpper(str) {\n\t\t\tlettersArray = append(lettersArray, string(char))\n\t\t}\n\t\tjsonObject[str] = lettersArray\n\t}\n\n\tjsonObjectBytes, _ := json.Marshal(jsonObject)\n\n\tfmt.Println(string(jsonObjectBytes))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.swift",
                        "code": "import Foundation\n\nlet myStrings = CommandLine.arguments.dropFirst()\n\nlet stringLettersDict = Dictionary(\n  uniqueKeysWithValues: myStrings.map {\n    ($0, $0.map { String($0).uppercased() })\n  })\n\nlet jsonData = try JSONSerialization.data(withJSONObject: stringLettersDict)\nprint(String(data: jsonData, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.raku",
                        "code": "use v6;\nuse JSON::Fast;\n\nmy %data = @*ARGS.map: { $_ => [ .uc.comb ] };\nsay to-json(%data);",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_object_with_array_values.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\n\nuse json::JsonValue;\nuse std::env;\n\nextern crate json;\n\nfn main() {\n    let args: Vec<String> = env::args().skip(1).collect();\n\n    let mut json_object = JsonValue::new_object();\n\n    for arg in args {\n        let letters_array: JsonValue = arg\n            .to_uppercase()\n            .chars()\n            .map(|c| c.to_string().into())\n            .collect::<Vec<JsonValue>>()\n            .into();\n\n        json_object[arg] = letters_array;\n    }\n\n    println!(\"{}\", json_object.dump());\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_object_array",
                "group": "JSON",
                "doc_str": "Create and output a JSON array of objects",
                "doc_str_first_line": "Create and output a JSON array of objects",
                "implementations": [
                    {
                        "file_name": "json_object_array.py",
                        "code": "import json\nimport sys\n\n\nargs = sys.argv[1:]\n\nmy_array = [{arg.upper(): len(arg)} for arg in args]\n\nprint(json.dumps(my_array))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_object_array.rb",
                        "code": "require 'json'\n\nmy_strings = ARGV\n\nmy_array = my_strings.map { |string| {string.upcase => string.length} }\n\nputs JSON.generate(my_array)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_object_array.mjs",
                        "code": "const args = process.argv.slice(2)\n\nconst myArray = args.map((arg) => ({ [arg.toUpperCase()]: arg.length }))\n\nconsole.log(JSON.stringify(myArray))",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_object_array.mjs",
                        "code": "const args = Deno.args\n\nconst myArray = args.map((arg) => ({ [arg.toUpperCase()]: arg.length }))\n\nconsole.log(JSON.stringify(myArray))",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_object_array.php",
                        "code": "<?php\n$args = array_slice($argv, 1);\n\n$myArray = array_map(function($arg) {\n    return [strtoupper($arg) => strlen($arg)];\n}, $args);\n\necho json_encode($myArray);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_object_array.R",
                        "code": "library(jsonlite)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nmyArray <- list()\nfor (arg in args) {\n    string_length <- list()\n    string_length[[toupper(arg)]] <- nchar(arg)\n    myArray[[length(myArray)+1]] <- string_length\n}\n\ncat(toJSON(myArray, auto_unbox=TRUE))",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_object_array.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nprint JSON->new\n    ->canonical(1)\n    ->encode([map { { uc($_) => length($_) } } @ARGV]);",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonObjectArray.java",
                        "code": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\npublic class JsonObjectArray {\n    public static void main(String[] args) throws Exception{\n        if (args.length == 0) {\n            System.out.println(\"Usage: java JsonObjectArray <string1> <string2> ...\");\n            System.exit(1);\n        }\n\n        ObjectMapper objectMapper = new ObjectMapper();\n        ArrayNode arrayNode = objectMapper.createArrayNode();\n\n        for (String string : args) {\n            ObjectNode obj = objectMapper.createObjectNode();\n            obj.put(string.toUpperCase(), string.length());\n            arrayNode.add(obj);\n        }\n\n        String jsonArrayString = objectMapper.writeValueAsString(arrayNode);\n        System.out.println(jsonArrayString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_object_array.sh",
                        "code": "json_objects=()\n\nfor arg in \"$@\"; do\n    upper_arg=$(tr '[:lower:]' '[:upper:]' <<< \"$arg\")\n    length=${#arg}\n    json_objects+=(\"$(jo \"$upper_arg\"=\"$length\")\")\ndone\n\njo -a \"${json_objects[@]}\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_object_array.lua",
                        "code": "local cjson = require(\"dkjson\")\n\nlocal my_array = {}\n\nfor i = 1, #arg do\n    local string = arg[i]\n    table.insert(my_array, {\n        [arg[i]:upper()] = arg[i]:len()\n    })\nend\n\nprint(cjson.encode(my_array))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonObjectArray.cs",
                        "code": "using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Text.Json;\n\nclass JsonObjectArray\n{\n    public static void Main(string[] args){\n        var jsonObjects = args.Select(str => new Dictionary<string, object> {\n            { str.ToUpper(), str.Length }\n        }).ToList();\n        string jsonArrayString = JsonSerializer.Serialize(jsonObjects);\n        Console.WriteLine(jsonArrayString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_object_array.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\targs := os.Args[1:]\n\n\tvar arrayNode []map[string]interface{}\n\n\tfor _, str := range args {\n\t\tobj := make(map[string]interface{})\n\t\tobj[strings.ToUpper(str)] = len(str)\n\t\tarrayNode = append(arrayNode, obj)\n\t}\n\n\tjsonArrayBytes, _ := json.Marshal(arrayNode)\n\n\tfmt.Println(string(jsonArrayBytes))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_object_array.swift",
                        "code": "import Foundation\n\nlet args = CommandLine.arguments.dropFirst()\n\nlet myArray = args.map { [$0.uppercased(): $0.count] }\n\nlet jsonData = try JSONSerialization.data(withJSONObject: myArray)\nprint(String(data: jsonData, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_object_array.raku",
                        "code": "use v6;\nuse JSON::Fast;\n\nsay to-json(@*ARGS.map: { uc($_) => $_.chars });",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_object_array.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\n\nuse json::{object, JsonValue};\nuse std::env;\n\nextern crate json;\n\nfn main() {\n    let args = env::args().skip(1);\n    let json_array = JsonValue::Array(\n        args.into_iter()\n            .map(|string| {\n                object! {\n                    string.to_uppercase().as_str() => string.len()\n                }\n            })\n            .collect(),\n    );\n\n    println!(\"{}\", json_array.dump());\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "json_control_chars",
                "group": "JSON",
                "doc_str": "Test that control characters and emojis are output in valid JSON.",
                "doc_str_first_line": "Test that control characters and emojis are output in valid JSON.",
                "implementations": [
                    {
                        "file_name": "json_control_chars.py",
                        "code": "import json\nimport sys\n\ntest_string = sys.argv[1]\n\nprint(json.dumps(test_string))",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "json_control_chars.rb",
                        "code": "require 'json'\n\ntest_string = ARGV[0]\n\nputs JSON.generate(test_string)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "json_control_chars.mjs",
                        "code": "const myString = process.argv[2]\n\nconsole.log(JSON.stringify(myString))",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "json_control_chars.mjs",
                        "code": "const myString = Deno.args[0]\n\nconsole.log(JSON.stringify(myString))",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "json_control_chars.php",
                        "code": "<?php\n\n$testString = $argv[1];\n\necho json_encode($testString);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "json_control_chars.R",
                        "code": "library(jsonlite)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\ncat(toJSON(args, auto_unbox = TRUE))",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "json_control_chars.pl",
                        "code": "use strict;\nuse warnings;\nuse JSON;\n\nprint JSON->new->encode($ARGV[0]);",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "JsonControlChars.java",
                        "code": "import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class JsonControlChars {\n    public static void main(String[] args) throws JsonProcessingException{\n        if (args.length == 0) {\n            System.out.println(\"Usage: java JsonControlChars <test_string>\");\n            System.exit(1);\n        }\n\n        String testString = args[0];\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        String jsonString = objectMapper.writeValueAsString(testString);\n        System.out.println(jsonString);\n\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "json_control_chars.sh",
                        "code": "echo -n \"$1\" | jq -R -s .",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "json_control_chars.lua",
                        "code": "local cjson = require(\"dkjson\")\n\nprint(cjson.encode(arg[1]))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "JsonControlChars.cs",
                        "code": "using System;\nusing System.Text.Json;\n\nclass JsonControlChars{\n    public static void Main(string[] args){\n        string testString = args[0];\n        string jsonString = JsonSerializer.Serialize(testString);\n\n        Console.WriteLine(jsonString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "json_control_chars.go",
                        "code": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\ttestString := os.Args[1]\n\n\tjsonString, _ := json.Marshal(testString)\n\n\tfmt.Println(string(jsonString))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "json_control_chars.swift",
                        "code": "import Foundation\n\nlet testString = CommandLine.arguments[1]\n\nlet jsonData = try JSONEncoder().encode(testString)\nprint(String(data: jsonData, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "json_control_chars.raku",
                        "code": "use v6;\n\nuse JSON::Fast;\n\nsay to-json(@*ARGS[0]);",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "json_control_chars.rs",
                        "code": "//cargo-deps: json=\"0.12.4\"\n\nuse json::JsonValue;\nuse std::env;\n\nextern crate json;\n\nfn main() {\n    let test_string = env::args().nth(1).unwrap();\n\n    let json_value: JsonValue = test_string.into();\n\n    println!(\"{}\", json_value.dump());\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            }
        ]
    },
    {
        "group_name": "Base64",
        "group_slug": "base64",
        "test_cases": [
            {
                "script_name": "decode",
                "group": "Base64",
                "doc_str": "Decode a base64 string",
                "doc_str_first_line": "Decode a base64 string",
                "implementations": [
                    {
                        "file_name": "decode.py",
                        "code": "import base64\nimport sys\n\nencoded_string = sys.argv[1]\n\ndecoded_string = base64.b64decode(encoded_string).decode()\n\nprint(decoded_string)",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "decode.rb",
                        "code": "require 'base64'\n\nencoded_string = ARGV[0]\n\nputs Base64.decode64(encoded_string)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "decode.mjs",
                        "code": "const encodedString = process.argv[2]\n\nconst decodedString = atob(encodedString)\n\nconsole.log(decodedString)",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "decode.mjs",
                        "code": "const encodedString = Deno.args[0]\n\nconst decodedString = atob(encodedString)\n\nconsole.log(decodedString)",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "decode.php",
                        "code": "<?php\n\n$encodedString = $argv[1];\n\necho base64_decode($encodedString);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "decode.R",
                        "code": "library(base64enc)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\ndecoded_string <- rawToChar(base64decode(args))\n\ncat(decoded_string)",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "decode.pl",
                        "code": "use strict;\nuse warnings;\nuse MIME::Base64;\n\nprint decode_base64($ARGV[0]);",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "Decode.java",
                        "code": "import java.util.Base64;\n\npublic class Decode {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Usage: java Decode.java <encoded_string>\");\n            System.exit(1);\n        }\n\n        String encodedString = args[0];\n        byte[] decodedBytes = Base64.getDecoder().decode(encodedString);\n        String decodedString = new String(decodedBytes);\n\n        System.out.println(decodedString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "decode.sh",
                        "code": "encoded_string=\"$1\"\n\nbase64 -d <<< \"$encoded_string\"",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "decode.lua",
                        "code": "local base64 = require(\"base64\")\nprint(base64.decode(arg[1]))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "Decode.cs",
                        "code": "using System;\n\nclass Decode{\n    public static void Main(string[] args){\n        string encodedString = args[0];\n\n        byte[] decodedBytes = Convert.FromBase64String(encodedString);\n        string decodedString = System.Text.Encoding.UTF8.GetString(decodedBytes);\n\n        Console.WriteLine(decodedString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "decode.go",
                        "code": "package main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tdecodedBytes, _ := base64.StdEncoding.DecodeString(os.Args[1])\n\n\tfmt.Println(string(decodedBytes))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "decode.swift",
                        "code": "import Foundation\n\nlet encodedString = CommandLine.arguments[1]\nlet data = Data(base64Encoded: encodedString)\nprint(String(data: data!, encoding: .utf8)!)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "decode.raku",
                        "code": "use v6;\nuse MIME::Base64;\n\nsay MIME::Base64.decode-str(@*ARGS[0]);",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "decode.rs",
                        "code": "//cargo-deps: base64=\"0.13\"\n\nextern crate base64;\n\nuse base64::decode;\nuse std::env;\n\nfn main() {\n    let encoded_string = env::args().nth(1).unwrap();\n    let decoded_bytes = decode(encoded_string).unwrap();\n    let decoded_string = String::from_utf8(decoded_bytes).unwrap();\n    println!(\"{}\", decoded_string);\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "encode",
                "group": "Base64",
                "doc_str": "Encode a string as base64",
                "doc_str_first_line": "Encode a string as base64",
                "implementations": [
                    {
                        "file_name": "encode.py",
                        "code": "import base64\nimport sys\n\ntest_string = sys.argv[1]\n\nencoded_string = base64.b64encode(test_string.encode()).decode()\n\nprint(encoded_string)",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "encode.rb",
                        "code": "require 'base64'\n\ntest_string = ARGV[0]\n\nputs Base64.encode64(test_string)",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "encode.mjs",
                        "code": "const testString = process.argv[2]\n\nconst encodedString = btoa(testString)\n\nconsole.log(encodedString)",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "encode.mjs",
                        "code": "const testString = Deno.args[0]\n\nconst encodedString = btoa(testString)\n\nconsole.log(encodedString)",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "encode.php",
                        "code": "<?php\n\n$stringToEncode = $argv[1];\n\necho base64_encode($stringToEncode);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "encode.R",
                        "code": "library(base64enc)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nencoded_string <- base64encode(charToRaw(args))\n\ncat(encoded_string)",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "encode.pl",
                        "code": "use strict;\nuse warnings;\nuse MIME::Base64;\n\nprint encode_base64($ARGV[0], '');",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "Encode.java",
                        "code": "import java.util.Base64;\n\npublic class Encode {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Usage: java Encode.java <test_string>\");\n            System.exit(1);\n        }\n\n        String testString = args[0];\n        String encodedString = Base64.getEncoder().encodeToString(testString.getBytes());\n\n        System.out.println(encodedString);\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "encode.sh",
                        "code": "test_string=\"$1\"\n\necho -n \"$test_string\" | base64",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "encode.lua",
                        "code": "local base64 = require(\"base64\")\nprint(base64.encode(arg[1]))",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "Encode.cs",
                        "code": "using System;\n\nclass Encode{\n    public static void Main(string[] args){\n        string testString = args[0];\n        string encodedString = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(testString));\n        Console.WriteLine(encodedString);\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "encode.go",
                        "code": "package main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfmt.Println(base64.StdEncoding.EncodeToString([]byte(os.Args[1])))\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "encode.swift",
                        "code": "import Foundation\n\nlet data = CommandLine.arguments[1].data(using: .utf8)!\nprint(data.base64EncodedString())",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "encode.raku",
                        "code": "use v6;\nuse MIME::Base64;\n\nsay MIME::Base64.encode-str(@*ARGS[0]);",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "encode.rs",
                        "code": "//cargo-deps: base64=\"0.13\"\n\nuse std::env;\n\nextern crate base64;\n\nfn main() {\n    let test_string = env::args().nth(1).unwrap();\n    let encoded_string = base64::encode(test_string);\n\n    println!(\"{}\", encoded_string);\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            }
        ]
    },
    {
        "group_name": "Pipe I/O",
        "group_slug": "pipe-io",
        "test_cases": [
            {
                "script_name": "streaming_pipe_in",
                "group": "Pipe I/O",
                "doc_str": "Read from named pipe line by line",
                "doc_str_first_line": "Read from named pipe line by line",
                "implementations": [
                    {
                        "file_name": "streaming_pipe_in.py",
                        "code": "import sys\n\npipe_in = \"input.pipe\"\n\nwith open(pipe_in, 'r', encoding='utf-8') as input_pipe:\n    for line in input_pipe:\n        sys.stdout.write(line.upper())\n        sys.stdout.flush()",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.rb",
                        "code": "STDOUT.sync = true\n\nFile.foreach 'input.pipe' do |line|\n  puts line.upcase\nend",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.mjs",
                        "code": "import * as fs from 'fs';\nimport * as readline from 'node:readline/promises';\n\nconst pipeIn = \"input.pipe\";\n\nconst input = fs.createReadStream(pipeIn);\nconst rl = readline.createInterface({ input })\n\nfor await (const line of rl) {\n  console.log(line.toUpperCase())\n}",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.mjs",
                        "code": "import { readLines } from 'https://deno.land/std/io/mod.ts';\n\nconst file = await Deno.open(\"input.pipe\", { read: true });\n\nfor await (const line of readLines(file)) {\n  console.log(line.toUpperCase());\n}\n\nfile.close();",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.php",
                        "code": "<?php\n\n$input_pipe = fopen(\"input.pipe\", 'r');\n\nwhile (($line = fgets($input_pipe)) !== false) {\n    echo strtoupper($line);\n}\n\nfclose($input_pipe);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.R",
                        "code": "input <- file(\"input.pipe\", \"r\")\n\nwhile (length(line <- readLines(input, n = 1)) > 0) {\n  cat(toupper(line), \"\\n\")\n}\n\nclose(input)",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.pl",
                        "code": "use strict;\nuse warnings;\n\n$| = 1;\nopen my $input, '<', \"input.pipe\";\n\nprint uc($_) while <$input>;\n\nclose $input;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "StreamingPipeIn.java",
                        "code": "import java.io.*;\n\npublic class StreamingPipeIn {\n    public static void main(String[] args) throws Exception {\n        var pipe_in = \"input.pipe\";\n\n        var input = new BufferedReader(new FileReader(pipe_in));\n\n        String line;\n        while ((line = input.readLine()) != null) {\n            System.out.println(line.toUpperCase());\n        }\n\n        input.close();\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.sh",
                        "code": "tr '[:lower:]' '[:upper:]' < input.pipe",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.lua",
                        "code": "local input_file = io.open(\"input.pipe\", \"r\")\n\nfor line in input_file:lines() do\n    io.write(line:upper() .. \"\\n\")\n    io.flush()\nend\n\ninput_file:close()",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "StreamingPipeIn.cs",
                        "code": "using System;\nusing System.IO;\n\nclass StreamingPipeIn\n{\n    public static void Main(string[] args)\n    {\n        using var reader = new StreamReader(\"input.pipe\");\n\n        string line;\n        while ((line = reader.ReadLine()) != null)\n        {\n            Console.WriteLine(line.ToUpper());\n        }\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.go",
                        "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tpipeIn := \"input.pipe\"\n\n\tfile, _ := os.Open(pipeIn)\n\tdefer file.Close()\n\n\tscanner := bufio.NewScanner(file)\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tfmt.Println(strings.ToUpper(line))\n\t}\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.swift",
                        "code": "import Foundation\n\n#if os(macOS) || os(iOS)\n  import Darwin\n#elseif os(Linux)\n  import Glibc\n#endif\nsetvbuf(stdout, nil, _IONBF, 0)\n\nlet pipe_in = \"input.pipe\"\n\npublic class FileLines: Sequence, IteratorProtocol {\n  private let file: UnsafeMutablePointer<FILE>\n\n  init?(path: String) {\n    guard let file = fopen(path, \"r\") else { return nil }\n    self.file = file\n  }\n\n  public func next() -> String? {\n    var line: UnsafeMutablePointer<CChar>? = nil\n    var linecap: Int = 0\n    defer { free(line) }\n    return getline(&line, &linecap, file) > 0 ? String(cString: line!) : nil\n  }\n\n  deinit {\n    fclose(file)\n  }\n\n  public func makeIterator() -> FileLines {\n    return self\n  }\n}\n\n// in new versions of Swift, this can be replaced with `if let lines = FileHandle(forReadingAtPath: pipe_in).bytes.lines`\nif let lines = FileLines(path: pipe_in) {\n  for line in lines {\n    print(line.uppercased(), terminator: \"\")\n  }\n}",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.raku",
                        "code": "use v6;\n\nmy $input = open \"input.pipe\", :r;\n\nfor $input.lines {\n    say .uc;\n    $*OUT.flush;\n}\n\n$input.close;",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in.rs",
                        "code": "use std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main() {\n    let file = File::open(\"input.pipe\").unwrap();\n\n    for line in BufReader::new(file).lines() {\n        println!(\"{}\", line.unwrap().to_uppercase());\n    }\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "write_to_named_pipe",
                "group": "Pipe I/O",
                "doc_str": "Write text to a named pipe",
                "doc_str_first_line": "Write text to a named pipe",
                "implementations": [
                    {
                        "file_name": "write_to_named_pipe.py",
                        "code": "outfile = \"output.pipe\"\ntext = \"Hello World!\"\n\nwith open(outfile, 'w', encoding='utf-8') as f:\n    f.write(text)",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.rb",
                        "code": "File.write \"output.pipe\", \"Hello World!\"",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.mjs",
                        "code": "import fs from 'fs/promises'\n\nawait fs.writeFile(\"output.pipe\", \"Hello World!\")",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.mjs",
                        "code": "const encoder = new TextEncoder();\n\nawait Deno.writeFile(\"output.pipe\", encoder.encode(\"Hello World!\"));",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.php",
                        "code": "<?php\n\nfile_put_contents(\"output.pipe\", \"Hello World!\");",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.R",
                        "code": "writeLines(\"Hello World!\", \"output.pipe\")",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.pl",
                        "code": "use strict;\nuse warnings;\n\nopen my $fh, '>', \"output.pipe\";\nprint $fh \"Hello World!\";\nclose $fh;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "WriteToNamedPipe.java",
                        "code": "import java.nio.charset.StandardCharsets;\nimport java.nio.file.*;\n\npublic class WriteToNamedPipe {\n    public static void main(String[] args) throws Exception {\n        var outFile = Paths.get(\"output.pipe\");\n        var text = \"Hello World!\";\n        Files.write(outFile, text.getBytes(StandardCharsets.UTF_8));\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.sh",
                        "code": "echo \"Hello World!\" > output.pipe",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.lua",
                        "code": "local file = io.open(\"output.pipe\", \"w\")\nfile:write(\"Hello World!\")\nfile:close()",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "WriteToNamedPipe.cs",
                        "code": "using System;\nusing System.IO;\nusing System.Diagnostics;\n\nclass WriteToNamedPipe\n{\n    public static void Main(string[] args)\n    {\n        using var writer = new StreamWriter(\"output.pipe\") { AutoFlush = true };\n        writer.WriteLine(\"Hello World!\");\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.go",
                        "code": "package main\n\nimport (\n\t\"os\"\n)\n\nfunc main() {\n\tos.WriteFile(\"output.pipe\", []byte(\"Hello World!\"), 0)\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.swift",
                        "code": "import Foundation\n\ntry \"Hello World!\".write(toFile: \"output.pipe\", atomically: false, encoding: .utf8)",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.raku",
                        "code": "use v6;\n\nmy $fh = open \"output.pipe\", :w;\n$fh.print: \"Hello World!\";\n$fh.close;",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "write_to_named_pipe.rs",
                        "code": "use std::fs::write;\n\nfn main() {\n    write(\"output.pipe\", \"Hello World!\").unwrap();\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            },
            {
                "script_name": "streaming_pipe_in_and_out",
                "group": "Pipe I/O",
                "doc_str": "Read line by line from a named pipe and write to another named pipe",
                "doc_str_first_line": "Read line by line from a named pipe and write to another named pipe",
                "implementations": [
                    {
                        "file_name": "streaming_pipe_in_and_out.py",
                        "code": "input_file = 'streaming-in.pipe'\noutput_file = 'streaming-out.pipe'\n\nwith open(input_file, 'r', encoding='utf-8') as input_pipe:\n    with open(output_file, 'w', encoding='utf-8') as output_pipe:\n        for line in input_pipe:\n            output_pipe.write(f\"received {line.strip()}\\n\")\n            output_pipe.flush()",
                        "language": {
                            "name": "python",
                            "human_name": "Python",
                            "script_ext": ".py",
                            "syntax_highlighting": "python",
                            "icon_id": "python",
                            "directory": "python"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.rb",
                        "code": "File.open 'streaming-out.pipe', 'w' do |output|\n  output.sync = true\n\n  File.foreach \"streaming-in.pipe\" do |line|\n    output.puts \"received #{line}\"\n  end\nend",
                        "language": {
                            "name": "ruby",
                            "human_name": "Ruby",
                            "script_ext": ".rb",
                            "syntax_highlighting": "ruby",
                            "icon_id": "ruby",
                            "directory": "ruby"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.mjs",
                        "code": "import * as fs from 'fs';\nimport * as readline from 'node:readline/promises';\n\nconst inputStream = fs.createReadStream('streaming-in.pipe');\nconst outputStream = fs.createWriteStream('streaming-out.pipe');\n\nconst rl = readline.createInterface({ input: inputStream });\n\nfor await (const line of rl) {\n  outputStream.write(`received ${line}\\n`);\n}\n\noutputStream.end();",
                        "language": {
                            "name": "nodejs",
                            "human_name": "Javascript (Nodejs)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "nodejs",
                            "directory": "nodejs"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.mjs",
                        "code": "import { readLines } from 'https://deno.land/std/io/mod.ts';\n\nconst output = await Deno.open('streaming-out.pipe', { write: true });\nconst input = await Deno.open('streaming-in.pipe', { read: true });\n\nconst textEncoder = new TextEncoder();\n\nfor await (const line of readLines(input)) {\n  await output.write(textEncoder.encode(`received ${line}\\n`));\n}\n\ninput.close();\noutput.close();",
                        "language": {
                            "name": "deno",
                            "human_name": "Javascript (Deno)",
                            "script_ext": ".mjs",
                            "syntax_highlighting": "javascript",
                            "icon_id": "denojs",
                            "directory": "deno"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.php",
                        "code": "<?php\n\n$output_pipe = fopen('streaming-out.pipe', 'w');\n$input_pipe = fopen('streaming-in.pipe', 'r');\n\nwhile (($line = fgets($input_pipe)) !== false) {\n    fwrite($output_pipe, \"received \" . $line);\n}\n\nfclose($input_pipe);\nfclose($output_pipe);",
                        "language": {
                            "name": "php",
                            "human_name": "Php",
                            "script_ext": ".php",
                            "syntax_highlighting": "php",
                            "icon_id": "php",
                            "directory": "php"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.R",
                        "code": "input <- file(\"streaming-in.pipe\", \"r\")\noutput <- file(\"streaming-out.pipe\", \"w\")\n\nwhile (length(line <- readLines(input, n = 1)) > 0) {\n  writeLines(paste(\"received\", line), con = output)\n  flush(output)\n}\n\nclose(input)\nclose(output)",
                        "language": {
                            "name": "r",
                            "human_name": "R",
                            "script_ext": ".R",
                            "syntax_highlighting": "r",
                            "icon_id": "r",
                            "directory": "r"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.pl",
                        "code": "use strict;\nuse warnings;\n\nopen my $output, '>', 'streaming-out.pipe';\nopen my $input, '<', 'streaming-in.pipe';\n\n$output->autoflush(1);\n\nprint $output \"received $_\" while <$input>;\n\nclose $input;\nclose $output;",
                        "language": {
                            "name": "perl",
                            "human_name": "Perl",
                            "script_ext": ".pl",
                            "syntax_highlighting": "perl",
                            "icon_id": "perl",
                            "directory": "perl"
                        }
                    },
                    {
                        "file_name": "StreamingPipeInAndOut.java",
                        "code": "import java.io.*;\n\npublic class StreamingPipeInAndOut {\n    public static void main (String[] args) throws IOException{\n        var inputPath = \"streaming-in.pipe\";\n        var outputPath = \"streaming-out.pipe\";\n\n        var input = new BufferedReader(new FileReader(inputPath));\n        var output = new BufferedWriter(new FileWriter(outputPath));\n\n        String line;\n        while ((line = input.readLine()) != null) {\n            output.write(\"received \" + line);\n            output.newLine();\n            output.flush();\n        }\n\n        input.close();\n        output.close();\n    }\n}",
                        "language": {
                            "name": "java",
                            "human_name": "Java",
                            "script_ext": ".java",
                            "syntax_highlighting": "java",
                            "icon_id": "java",
                            "directory": "java"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.sh",
                        "code": "while IFS= read -r line; do\n    echo \"received $line\"\ndone < streaming-in.pipe > streaming-out.pipe",
                        "language": {
                            "name": "bash",
                            "human_name": "Bash",
                            "script_ext": ".sh",
                            "syntax_highlighting": "bash",
                            "icon_id": "bash",
                            "directory": "bash"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.lua",
                        "code": "local output = io.open(\"streaming-out.pipe\", \"w\")\nlocal input = io.open(\"streaming-in.pipe\", \"r\")\n\nfor line in input:lines() do\n    output:write(\"received \" .. line .. \"\\n\")\n    output:flush()\nend\n\ninput:close()\noutput:close()",
                        "language": {
                            "name": "lua",
                            "human_name": "Lua",
                            "script_ext": ".lua",
                            "syntax_highlighting": "lua",
                            "icon_id": "lua",
                            "directory": "lua"
                        }
                    },
                    {
                        "file_name": "StreamingPipeInAndOut.cs",
                        "code": "using System;\nusing System.IO;\n\nclass StreamingPipeInAndOut\n{\n    public static void Main(string[] args)\n    {\n        using var input = new StreamReader(\"streaming-in.pipe\");\n        using var output = new StreamWriter(\"streaming-out.pipe\") { AutoFlush = true };\n\n        string line;\n        while ((line = input.ReadLine()) != null)\n        {\n            output.WriteLine($\"received {line}\");\n        }\n    }\n}",
                        "language": {
                            "name": "csharp",
                            "human_name": "C#",
                            "script_ext": ".cs",
                            "syntax_highlighting": "csharp",
                            "icon_id": "csharp",
                            "directory": "csharp"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.go",
                        "code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tinput, _ := os.Open(\"streaming-in.pipe\")\n\tdefer input.Close()\n\n\toutput, _ := os.OpenFile(\"streaming-out.pipe\", os.O_WRONLY, 0)\n\tdefer output.Close()\n\n\toutput.Sync()\n\n\tscanner := bufio.NewScanner(input)\n\n\tfor scanner.Scan() {\n\t\tline := scanner.Text()\n\t\tfmt.Fprintf(output, \"received %s\\n\", line)\n\n\t}\n}",
                        "language": {
                            "name": "golang",
                            "human_name": "Go",
                            "script_ext": ".go",
                            "syntax_highlighting": "go",
                            "icon_id": "go",
                            "directory": "golang"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.swift",
                        "code": "import Foundation\n\n#if os(macOS) || os(iOS)\n  import Darwin\n#elseif os(Linux)\n  import Glibc\n#endif\nsetvbuf(stdout, nil, _IONBF, 0)\n\nlet pipe_in = \"streaming-in.pipe\"\nlet pipe_out = \"streaming-out.pipe\"\n\nlet fileDescriptor = open(pipe_out, O_WRONLY)\n\npublic class FileLines: Sequence, IteratorProtocol {\n  private let file: UnsafeMutablePointer<FILE>\n\n  init?(path: String) {\n    guard let file = fopen(path, \"r\") else { return nil }\n    self.file = file\n  }\n\n  public func next() -> String? {\n    var line: UnsafeMutablePointer<CChar>? = nil\n    var linecap: Int = 0\n    defer { free(line) }\n    return getline(&line, &linecap, file) > 0 ? String(cString: line!) : nil\n  }\n\n  deinit {\n    fclose(file)\n  }\n\n  public func makeIterator() -> FileLines {\n    return self\n  }\n}\n\nif let lines = FileLines(path: pipe_in) {\n  for line in lines {\n    let outputLine = \"received \\(line)\"\n    write(fileDescriptor, outputLine, outputLine.utf8.count)\n  }\n}",
                        "language": {
                            "name": "swift",
                            "human_name": "Swift",
                            "script_ext": ".swift",
                            "syntax_highlighting": "swift",
                            "icon_id": "swift",
                            "directory": "swift"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.raku",
                        "code": "use v6;\n\nmy $output = open 'streaming-out.pipe', :w;\nmy $input = open 'streaming-in.pipe', :r;\n\n$output.say(\"received $_\") for $input.lines;\n\n$output.close;\n$input.close;",
                        "language": {
                            "name": "raku",
                            "human_name": "Raku",
                            "script_ext": ".raku",
                            "syntax_highlighting": "raku",
                            "icon_id": "raku",
                            "directory": "raku"
                        }
                    },
                    {
                        "file_name": "streaming_pipe_in_and_out.rs",
                        "code": "use std::fs::File;\nuse std::io::{self, BufRead, BufReader, Write};\n\nfn main() {\n    let mut output = File::create(\"streaming-out.pipe\").unwrap();\n    let input = File::open(\"streaming-in.pipe\").unwrap();\n\n    for line in BufReader::new(input).lines() {\n        writeln!(output, \"received {}\", line.unwrap()).unwrap();\n    }\n}",
                        "language": {
                            "name": "rust",
                            "human_name": "Rust",
                            "script_ext": ".rs",
                            "syntax_highlighting": "rust",
                            "icon_id": "rust",
                            "directory": "rust"
                        }
                    }
                ]
            }
        ]
    }
]